/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiLeaveApproveIdPut$Json } from '../fn/leave-requests/api-leave-approve-id-put-json';
import { ApiLeaveApproveIdPut$Json$Params } from '../fn/leave-requests/api-leave-approve-id-put-json';
import { apiLeaveApproveIdPut$Plain } from '../fn/leave-requests/api-leave-approve-id-put-plain';
import { ApiLeaveApproveIdPut$Plain$Params } from '../fn/leave-requests/api-leave-approve-id-put-plain';
import { apiLeaveEmployeeEmailGet$Json } from '../fn/leave-requests/api-leave-employee-email-get-json';
import { ApiLeaveEmployeeEmailGet$Json$Params } from '../fn/leave-requests/api-leave-employee-email-get-json';
import { apiLeaveEmployeeEmailGet$Plain } from '../fn/leave-requests/api-leave-employee-email-get-plain';
import { ApiLeaveEmployeeEmailGet$Plain$Params } from '../fn/leave-requests/api-leave-employee-email-get-plain';
import { apiLeaveGet$Json } from '../fn/leave-requests/api-leave-get-json';
import { ApiLeaveGet$Json$Params } from '../fn/leave-requests/api-leave-get-json';
import { apiLeaveGet$Plain } from '../fn/leave-requests/api-leave-get-plain';
import { ApiLeaveGet$Plain$Params } from '../fn/leave-requests/api-leave-get-plain';
import { apiLeaveIdDelete$Json } from '../fn/leave-requests/api-leave-id-delete-json';
import { ApiLeaveIdDelete$Json$Params } from '../fn/leave-requests/api-leave-id-delete-json';
import { apiLeaveIdDelete$Plain } from '../fn/leave-requests/api-leave-id-delete-plain';
import { ApiLeaveIdDelete$Plain$Params } from '../fn/leave-requests/api-leave-id-delete-plain';
import { apiLeaveIdGet$Json } from '../fn/leave-requests/api-leave-id-get-json';
import { ApiLeaveIdGet$Json$Params } from '../fn/leave-requests/api-leave-id-get-json';
import { apiLeaveIdGet$Plain } from '../fn/leave-requests/api-leave-id-get-plain';
import { ApiLeaveIdGet$Plain$Params } from '../fn/leave-requests/api-leave-id-get-plain';
import { apiLeavePost$Json } from '../fn/leave-requests/api-leave-post-json';
import { ApiLeavePost$Json$Params } from '../fn/leave-requests/api-leave-post-json';
import { apiLeavePost$Plain } from '../fn/leave-requests/api-leave-post-plain';
import { ApiLeavePost$Plain$Params } from '../fn/leave-requests/api-leave-post-plain';
import { apiLeaveRejectIdPut$Json } from '../fn/leave-requests/api-leave-reject-id-put-json';
import { ApiLeaveRejectIdPut$Json$Params } from '../fn/leave-requests/api-leave-reject-id-put-json';
import { apiLeaveRejectIdPut$Plain } from '../fn/leave-requests/api-leave-reject-id-put-plain';
import { ApiLeaveRejectIdPut$Plain$Params } from '../fn/leave-requests/api-leave-reject-id-put-plain';
import { BooleanApiResponse } from '../models/boolean-api-response';
import { LeaveRequestDtoApiResponse } from '../models/leave-request-dto-api-response';
import { LeaveRequestDtoIEnumerableApiResponse } from '../models/leave-request-dto-i-enumerable-api-response';

@Injectable({ providedIn: 'root' })
export class LeaveRequestsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiLeaveGet()` */
  static readonly ApiLeaveGetPath = '/api/leave';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLeaveGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveGet$Plain$Response(params?: ApiLeaveGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<LeaveRequestDtoIEnumerableApiResponse>> {
    return apiLeaveGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLeaveGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveGet$Plain(params?: ApiLeaveGet$Plain$Params, context?: HttpContext): Observable<LeaveRequestDtoIEnumerableApiResponse> {
    return this.apiLeaveGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<LeaveRequestDtoIEnumerableApiResponse>): LeaveRequestDtoIEnumerableApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLeaveGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveGet$Json$Response(params?: ApiLeaveGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<LeaveRequestDtoIEnumerableApiResponse>> {
    return apiLeaveGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLeaveGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveGet$Json(params?: ApiLeaveGet$Json$Params, context?: HttpContext): Observable<LeaveRequestDtoIEnumerableApiResponse> {
    return this.apiLeaveGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<LeaveRequestDtoIEnumerableApiResponse>): LeaveRequestDtoIEnumerableApiResponse => r.body)
    );
  }

  /** Path part for operation `apiLeavePost()` */
  static readonly ApiLeavePostPath = '/api/leave';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLeavePost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiLeavePost$Plain$Response(params?: ApiLeavePost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<LeaveRequestDtoApiResponse>> {
    return apiLeavePost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLeavePost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiLeavePost$Plain(params?: ApiLeavePost$Plain$Params, context?: HttpContext): Observable<LeaveRequestDtoApiResponse> {
    return this.apiLeavePost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<LeaveRequestDtoApiResponse>): LeaveRequestDtoApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLeavePost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiLeavePost$Json$Response(params?: ApiLeavePost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<LeaveRequestDtoApiResponse>> {
    return apiLeavePost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLeavePost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiLeavePost$Json(params?: ApiLeavePost$Json$Params, context?: HttpContext): Observable<LeaveRequestDtoApiResponse> {
    return this.apiLeavePost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<LeaveRequestDtoApiResponse>): LeaveRequestDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `apiLeaveIdGet()` */
  static readonly ApiLeaveIdGetPath = '/api/leave/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLeaveIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveIdGet$Plain$Response(params: ApiLeaveIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<LeaveRequestDtoApiResponse>> {
    return apiLeaveIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLeaveIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveIdGet$Plain(params: ApiLeaveIdGet$Plain$Params, context?: HttpContext): Observable<LeaveRequestDtoApiResponse> {
    return this.apiLeaveIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<LeaveRequestDtoApiResponse>): LeaveRequestDtoApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLeaveIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveIdGet$Json$Response(params: ApiLeaveIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<LeaveRequestDtoApiResponse>> {
    return apiLeaveIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLeaveIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveIdGet$Json(params: ApiLeaveIdGet$Json$Params, context?: HttpContext): Observable<LeaveRequestDtoApiResponse> {
    return this.apiLeaveIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<LeaveRequestDtoApiResponse>): LeaveRequestDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `apiLeaveIdDelete()` */
  static readonly ApiLeaveIdDeletePath = '/api/leave/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLeaveIdDelete$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveIdDelete$Plain$Response(params: ApiLeaveIdDelete$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<BooleanApiResponse>> {
    return apiLeaveIdDelete$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLeaveIdDelete$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveIdDelete$Plain(params: ApiLeaveIdDelete$Plain$Params, context?: HttpContext): Observable<BooleanApiResponse> {
    return this.apiLeaveIdDelete$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<BooleanApiResponse>): BooleanApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLeaveIdDelete$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveIdDelete$Json$Response(params: ApiLeaveIdDelete$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<BooleanApiResponse>> {
    return apiLeaveIdDelete$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLeaveIdDelete$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveIdDelete$Json(params: ApiLeaveIdDelete$Json$Params, context?: HttpContext): Observable<BooleanApiResponse> {
    return this.apiLeaveIdDelete$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<BooleanApiResponse>): BooleanApiResponse => r.body)
    );
  }

  /** Path part for operation `apiLeaveEmployeeEmailGet()` */
  static readonly ApiLeaveEmployeeEmailGetPath = '/api/leave/employee/{email}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLeaveEmployeeEmailGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveEmployeeEmailGet$Plain$Response(params: ApiLeaveEmployeeEmailGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<LeaveRequestDtoIEnumerableApiResponse>> {
    return apiLeaveEmployeeEmailGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLeaveEmployeeEmailGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveEmployeeEmailGet$Plain(params: ApiLeaveEmployeeEmailGet$Plain$Params, context?: HttpContext): Observable<LeaveRequestDtoIEnumerableApiResponse> {
    return this.apiLeaveEmployeeEmailGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<LeaveRequestDtoIEnumerableApiResponse>): LeaveRequestDtoIEnumerableApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLeaveEmployeeEmailGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveEmployeeEmailGet$Json$Response(params: ApiLeaveEmployeeEmailGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<LeaveRequestDtoIEnumerableApiResponse>> {
    return apiLeaveEmployeeEmailGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLeaveEmployeeEmailGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveEmployeeEmailGet$Json(params: ApiLeaveEmployeeEmailGet$Json$Params, context?: HttpContext): Observable<LeaveRequestDtoIEnumerableApiResponse> {
    return this.apiLeaveEmployeeEmailGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<LeaveRequestDtoIEnumerableApiResponse>): LeaveRequestDtoIEnumerableApiResponse => r.body)
    );
  }

  /** Path part for operation `apiLeaveApproveIdPut()` */
  static readonly ApiLeaveApproveIdPutPath = '/api/leave/approve/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLeaveApproveIdPut$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveApproveIdPut$Plain$Response(params: ApiLeaveApproveIdPut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<BooleanApiResponse>> {
    return apiLeaveApproveIdPut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLeaveApproveIdPut$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveApproveIdPut$Plain(params: ApiLeaveApproveIdPut$Plain$Params, context?: HttpContext): Observable<BooleanApiResponse> {
    return this.apiLeaveApproveIdPut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<BooleanApiResponse>): BooleanApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLeaveApproveIdPut$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveApproveIdPut$Json$Response(params: ApiLeaveApproveIdPut$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<BooleanApiResponse>> {
    return apiLeaveApproveIdPut$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLeaveApproveIdPut$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveApproveIdPut$Json(params: ApiLeaveApproveIdPut$Json$Params, context?: HttpContext): Observable<BooleanApiResponse> {
    return this.apiLeaveApproveIdPut$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<BooleanApiResponse>): BooleanApiResponse => r.body)
    );
  }

  /** Path part for operation `apiLeaveRejectIdPut()` */
  static readonly ApiLeaveRejectIdPutPath = '/api/leave/reject/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLeaveRejectIdPut$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveRejectIdPut$Plain$Response(params: ApiLeaveRejectIdPut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<BooleanApiResponse>> {
    return apiLeaveRejectIdPut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLeaveRejectIdPut$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveRejectIdPut$Plain(params: ApiLeaveRejectIdPut$Plain$Params, context?: HttpContext): Observable<BooleanApiResponse> {
    return this.apiLeaveRejectIdPut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<BooleanApiResponse>): BooleanApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLeaveRejectIdPut$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveRejectIdPut$Json$Response(params: ApiLeaveRejectIdPut$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<BooleanApiResponse>> {
    return apiLeaveRejectIdPut$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLeaveRejectIdPut$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiLeaveRejectIdPut$Json(params: ApiLeaveRejectIdPut$Json$Params, context?: HttpContext): Observable<BooleanApiResponse> {
    return this.apiLeaveRejectIdPut$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<BooleanApiResponse>): BooleanApiResponse => r.body)
    );
  }

}
