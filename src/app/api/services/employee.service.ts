/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiEmployeeGet } from '../fn/employee/api-employee-get';
import { ApiEmployeeGet$Params } from '../fn/employee/api-employee-get';
import { apiEmployeeIdDelete } from '../fn/employee/api-employee-id-delete';
import { ApiEmployeeIdDelete$Params } from '../fn/employee/api-employee-id-delete';
import { apiEmployeeIdGet } from '../fn/employee/api-employee-id-get';
import { ApiEmployeeIdGet$Params } from '../fn/employee/api-employee-id-get';
import { apiEmployeePost } from '../fn/employee/api-employee-post';
import { ApiEmployeePost$Params } from '../fn/employee/api-employee-post';
import { apiEmployeePut } from '../fn/employee/api-employee-put';
import { ApiEmployeePut$Params } from '../fn/employee/api-employee-put';

@Injectable({ providedIn: 'root' })
export class EmployeeService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiEmployeeGet()` */
  static readonly ApiEmployeeGetPath = '/api/employee';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmployeeGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmployeeGet$Response(params?: ApiEmployeeGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEmployeeGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmployeeGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmployeeGet(params?: ApiEmployeeGet$Params, context?: HttpContext): Observable<void> {
    return this.apiEmployeeGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiEmployeePut()` */
  static readonly ApiEmployeePutPath = '/api/employee';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmployeePut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEmployeePut$Response(params?: ApiEmployeePut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEmployeePut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmployeePut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEmployeePut(params?: ApiEmployeePut$Params, context?: HttpContext): Observable<void> {
    return this.apiEmployeePut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiEmployeePost()` */
  static readonly ApiEmployeePostPath = '/api/employee';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmployeePost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEmployeePost$Response(params?: ApiEmployeePost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEmployeePost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmployeePost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEmployeePost(params?: ApiEmployeePost$Params, context?: HttpContext): Observable<void> {
    return this.apiEmployeePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiEmployeeIdGet()` */
  static readonly ApiEmployeeIdGetPath = '/api/employee/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmployeeIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmployeeIdGet$Response(params: ApiEmployeeIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEmployeeIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmployeeIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmployeeIdGet(params: ApiEmployeeIdGet$Params, context?: HttpContext): Observable<void> {
    return this.apiEmployeeIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiEmployeeIdDelete()` */
  static readonly ApiEmployeeIdDeletePath = '/api/employee/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmployeeIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmployeeIdDelete$Response(params: ApiEmployeeIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEmployeeIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmployeeIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmployeeIdDelete(params: ApiEmployeeIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiEmployeeIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
