/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiAuthProfileGet } from '../fn/auth/api-auth-profile-get';
import { ApiAuthProfileGet$Params } from '../fn/auth/api-auth-profile-get';
import { apiAuthRefreshTokenPost } from '../fn/auth/api-auth-refresh-token-post';
import { ApiAuthRefreshTokenPost$Params } from '../fn/auth/api-auth-refresh-token-post';
import { apiAuthSigninPost } from '../fn/auth/api-auth-signin-post';
import { ApiAuthSigninPost$Params } from '../fn/auth/api-auth-signin-post';
import { apiAuthSignoutPost } from '../fn/auth/api-auth-signout-post';
import { ApiAuthSignoutPost$Params } from '../fn/auth/api-auth-signout-post';
import { apiAuthVerifyTokenPost } from '../fn/auth/api-auth-verify-token-post';
import { ApiAuthVerifyTokenPost$Params } from '../fn/auth/api-auth-verify-token-post';

@Injectable({ providedIn: 'root' })
export class AuthService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiAuthSigninPost()` */
  static readonly ApiAuthSigninPostPath = '/api/auth/signin';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthSigninPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAuthSigninPost$Response(params?: ApiAuthSigninPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiAuthSigninPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthSigninPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAuthSigninPost(params?: ApiAuthSigninPost$Params, context?: HttpContext): Observable<void> {
    return this.apiAuthSigninPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiAuthSignoutPost()` */
  static readonly ApiAuthSignoutPostPath = '/api/auth/signout';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthSignoutPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthSignoutPost$Response(params?: ApiAuthSignoutPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiAuthSignoutPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthSignoutPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthSignoutPost(params?: ApiAuthSignoutPost$Params, context?: HttpContext): Observable<void> {
    return this.apiAuthSignoutPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiAuthProfileGet()` */
  static readonly ApiAuthProfileGetPath = '/api/auth/profile';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthProfileGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthProfileGet$Response(params?: ApiAuthProfileGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiAuthProfileGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthProfileGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthProfileGet(params?: ApiAuthProfileGet$Params, context?: HttpContext): Observable<void> {
    return this.apiAuthProfileGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiAuthVerifyTokenPost()` */
  static readonly ApiAuthVerifyTokenPostPath = '/api/auth/verify-token';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthVerifyTokenPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthVerifyTokenPost$Response(params?: ApiAuthVerifyTokenPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiAuthVerifyTokenPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthVerifyTokenPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthVerifyTokenPost(params?: ApiAuthVerifyTokenPost$Params, context?: HttpContext): Observable<void> {
    return this.apiAuthVerifyTokenPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiAuthRefreshTokenPost()` */
  static readonly ApiAuthRefreshTokenPostPath = '/api/auth/refresh-token';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthRefreshTokenPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthRefreshTokenPost$Response(params?: ApiAuthRefreshTokenPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiAuthRefreshTokenPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthRefreshTokenPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthRefreshTokenPost(params?: ApiAuthRefreshTokenPost$Params, context?: HttpContext): Observable<void> {
    return this.apiAuthRefreshTokenPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
