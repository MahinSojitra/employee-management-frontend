/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiDepartmentGet } from '../fn/department/api-department-get';
import { ApiDepartmentGet$Params } from '../fn/department/api-department-get';
import { apiDepartmentIdDelete } from '../fn/department/api-department-id-delete';
import { ApiDepartmentIdDelete$Params } from '../fn/department/api-department-id-delete';
import { apiDepartmentIdGet } from '../fn/department/api-department-id-get';
import { ApiDepartmentIdGet$Params } from '../fn/department/api-department-id-get';
import { apiDepartmentPost } from '../fn/department/api-department-post';
import { ApiDepartmentPost$Params } from '../fn/department/api-department-post';
import { apiDepartmentPut } from '../fn/department/api-department-put';
import { ApiDepartmentPut$Params } from '../fn/department/api-department-put';

@Injectable({ providedIn: 'root' })
export class DepartmentService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiDepartmentGet()` */
  static readonly ApiDepartmentGetPath = '/api/department';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDepartmentGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDepartmentGet$Response(params?: ApiDepartmentGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiDepartmentGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDepartmentGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDepartmentGet(params?: ApiDepartmentGet$Params, context?: HttpContext): Observable<void> {
    return this.apiDepartmentGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiDepartmentPut()` */
  static readonly ApiDepartmentPutPath = '/api/department';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDepartmentPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDepartmentPut$Response(params?: ApiDepartmentPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiDepartmentPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDepartmentPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDepartmentPut(params?: ApiDepartmentPut$Params, context?: HttpContext): Observable<void> {
    return this.apiDepartmentPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiDepartmentPost()` */
  static readonly ApiDepartmentPostPath = '/api/department';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDepartmentPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDepartmentPost$Response(params?: ApiDepartmentPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiDepartmentPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDepartmentPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDepartmentPost(params?: ApiDepartmentPost$Params, context?: HttpContext): Observable<void> {
    return this.apiDepartmentPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiDepartmentIdGet()` */
  static readonly ApiDepartmentIdGetPath = '/api/department/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDepartmentIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDepartmentIdGet$Response(params: ApiDepartmentIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiDepartmentIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDepartmentIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDepartmentIdGet(params: ApiDepartmentIdGet$Params, context?: HttpContext): Observable<void> {
    return this.apiDepartmentIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiDepartmentIdDelete()` */
  static readonly ApiDepartmentIdDeletePath = '/api/department/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDepartmentIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDepartmentIdDelete$Response(params: ApiDepartmentIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiDepartmentIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDepartmentIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDepartmentIdDelete(params: ApiDepartmentIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiDepartmentIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
