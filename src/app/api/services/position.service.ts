/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiPositionGet } from '../fn/position/api-position-get';
import { ApiPositionGet$Params } from '../fn/position/api-position-get';
import { apiPositionIdDelete } from '../fn/position/api-position-id-delete';
import { ApiPositionIdDelete$Params } from '../fn/position/api-position-id-delete';
import { apiPositionIdGet } from '../fn/position/api-position-id-get';
import { ApiPositionIdGet$Params } from '../fn/position/api-position-id-get';
import { apiPositionPost } from '../fn/position/api-position-post';
import { ApiPositionPost$Params } from '../fn/position/api-position-post';
import { apiPositionPut } from '../fn/position/api-position-put';
import { ApiPositionPut$Params } from '../fn/position/api-position-put';

@Injectable({ providedIn: 'root' })
export class PositionService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiPositionGet()` */
  static readonly ApiPositionGetPath = '/api/position';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPositionGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPositionGet$Response(params?: ApiPositionGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiPositionGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPositionGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPositionGet(params?: ApiPositionGet$Params, context?: HttpContext): Observable<void> {
    return this.apiPositionGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiPositionPut()` */
  static readonly ApiPositionPutPath = '/api/position';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPositionPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiPositionPut$Response(params?: ApiPositionPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiPositionPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPositionPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiPositionPut(params?: ApiPositionPut$Params, context?: HttpContext): Observable<void> {
    return this.apiPositionPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiPositionPost()` */
  static readonly ApiPositionPostPath = '/api/position';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPositionPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiPositionPost$Response(params?: ApiPositionPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiPositionPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPositionPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiPositionPost(params?: ApiPositionPost$Params, context?: HttpContext): Observable<void> {
    return this.apiPositionPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiPositionIdGet()` */
  static readonly ApiPositionIdGetPath = '/api/position/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPositionIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPositionIdGet$Response(params: ApiPositionIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiPositionIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPositionIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPositionIdGet(params: ApiPositionIdGet$Params, context?: HttpContext): Observable<void> {
    return this.apiPositionIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiPositionIdDelete()` */
  static readonly ApiPositionIdDeletePath = '/api/position/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPositionIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPositionIdDelete$Response(params: ApiPositionIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiPositionIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPositionIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPositionIdDelete(params: ApiPositionIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiPositionIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
